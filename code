from tkinter import *
from tkinter import messagebox
from PIL import ImageTk, Image

import requests
from bs4 import BeautifulSoup

# functions

def switchPhoto():
    global photo
    my_image = Image.open("headshots/crosbi01.jpg")
    photo = ImageTk.PhotoImage(my_image)
    can.itemconfig(myimg,image=photo)

def addItem():
   item = lst.get()
   if (lst.count != 0):
      lst.append(item)
      lst.delete(0, END) 
      updatelab()     
      
def remItem():
   item = listbox.curselection()
   position = 0
   for i in item:
       id = int(i) - position
       listbox.delete(id, id)
       position += 1
      
def saveList():
    myfile = open("myplayers.txt","w")
    for player in lst:
        myfile.write(player + "\n")
    myfile.close()
    messagebox.showinfo("myplayers.txt", "Players saved to disk")

def updatelab():
    global lstprint
    for item in lst:
        lstprint = lstprint + item + "\n"
    mylab.configure(text=lstprint)
    return(lstprint) 

def scrape():
    if (messagebox.askyesno("Wait?", "This could take a few seconds. Wait?") == False):
        return
    if content != -99:
        #content = BeautifulSoup(site.content, 'html.parser')                    
        totalpts = 0
        for myplayer in lst:
            dTag = content.find(attrs={"csk": myplayer})
            parent = dTag.findParent('tr')
            playerpts = int(parent.contents[8].text) # 8th tag is total points
            print(myplayer + " " + str(playerpts))
            totalpts = totalpts + playerpts         
            mypts.configure(text=totalpts)
        
            

def makeOptions():
    if content != 99:
        names = content.findAll(attrs={"data-stat": "player"})
        playerOptions = []
        for player in names:
            if(player != "None"):
                playerOptions.append(player.get('csk'))
        return playerOptions
        
def addPlayer(evt):
    global players
    name = variable.get()
    if players.count(name) > 0:
        return
    listbox.insert(END, name)
    lst.append(name)
    
def createlistbox(value):
    var=listbox.get(ANCHOR)
    if var!=NONE:
        dTag=content.find(attrs={"csk":var})
        parent=dTag.findParent("tr")
        points=int(parent.contents[8].text)
        games=int(parent.contents[5].text)
        team=str(parent.contents[3].text)
        position=str(parent.contents[4].text)
        goals=int(parent.contents[6].text)
        assists=int(parent.contents[7].text)
    listbox2 = Listbox(root,height=9)
    listbox2.place(x=500, y=309)
    listbox2.insert(END, "[Stats]")
    listbox2.insert(END,"Points: " + str(points))
    listbox2.insert(END, "Games Played: " + str(games))
    listbox2.insert(END,"Team: " + team)
    listbox2.insert(END,"Position: " + position)
    listbox2.insert(END,"Goals: " + str(goals))
    listbox2.insert(END,"Assists: " + str(assists))


# main part of code
players = []
lst = []
lstprint = ""
totalpts = 0 
print("Downloading hockey data")
site = requests.get('https://www.hockey-reference.com/leagues/NHL_2019_skaters.html')

if site.status_code is 200:
    content = BeautifulSoup(site.content, 'html.parser')
else:
    content = -99


root = Tk()
root.geometry("785x450+0+1100")
root.configure(background="green")
root.title("hockey pool")

lstprint = ""

can = Canvas(root, width=700, height=500)
image1 = Image.open("download.jpg")
photo = ImageTk.PhotoImage(image1)
can.create_image(10,8, anchor=NW, image=photo)
can.configure(background="blue")
can.place()

#draw canvas
can = Canvas(root)
can.grid(row=0,column=0,padx=10, pady=10)
image1 = Image.open("download.jpg")
photo = ImageTk.PhotoImage(image1)
can.create_image(0,0, anchor=NW, image=photo)
can.configure(background="red")



#listbox
listbox = Listbox(root,height=7)
listbox.place(x=300, y=300)

listbox.bind("<<ListboxSelect>>", createlistbox)
listbox.configure(background="red")

rembutton = Button(root, text="Remove", command=remItem)
rembutton.grid(row=1,column=1,sticky=E,padx=10 )

savebutton = Button(root, text="Save to myplayers.txt", command=saveList)
savebutton.grid(row=1,column=2,sticky=E,padx=10)

mylab = Label(root,text=lstprint,anchor=W,justify=LEFT)
mylab.grid(row=1,column=3,sticky=E,padx=10)

ptsbutton = Button(root,text="Check pts", command=scrape)
ptsbutton.grid(row=1,column=3,sticky=E,padx=10)

#pulldown
OPTIONS = makeOptions()
variable = StringVar(root)
variable.set(OPTIONS[0]) #default value
w = OptionMenu(root, variable, *OPTIONS, command=addPlayer)
w.grid(row=1, column=4, sticky=E, padx=10)

mypts = Label(root,text=totalpts)
mypts.grid(row=2,column=3,sticky=E,padx=10)


mainloop()
